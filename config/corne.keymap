/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <400>;
};

&lt {
    tapping-term-ms = <400>;
};

/ {
    behaviors {
        shift_or_caps: shift_or_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_OR_CAPS";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_SHIFT>,
                <&kp CAPS>;

            tapping-term-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
       &kp TAB  &kp Q  &kp W         &kp E  &kp R      &kp T        &kp Y  &kp U                &kp I    &kp O     &kp P        &kp BSPC
     &kp LCTRL  &kp A  &kp S         &kp D  &kp F      &kp G        &kp H  &kp J                &kp K    &kp L  &kp SEMI         &kp SQT
&shift_or_caps  &kp Z  &kp X         &kp C  &kp V      &kp B        &kp N  &kp M            &kp COMMA  &kp DOT  &kp FSLH  &shift_or_caps
                              &kp LEFT_GUI  &mo 2  &kp SPACE    &kp ENTER  &mo 1  &mt LEFT_ALT ESCAPE
            >;
        };

        num_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans          &trans            &trans      &trans             &trans           &trans    &kp NUMBER_0  &kp N7  &kp N8  &kp N9  &trans  &kp DEL
&trans  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP          &trans  &kp N4  &kp N5  &kp N6  &trans   &trans
&trans          &trans            &trans      &trans             &trans           &trans          &trans  &kp N1  &kp N2  &kp N3  &trans   &trans
                                              &trans              &mo 3           &trans          &trans  &trans  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT               &kp CARET               &kp AMPS  &kp KP_MULTIPLY    &trans  &kp MINUS  &kp EQUAL
   &trans    &trans  &trans    &trans    &trans     &trans    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS         &kp LBKT  &kp RBKT   &kp BSLH     &trans
   &trans    &trans  &trans    &trans    &trans     &trans          &kp LEFT_BRACE        &kp RIGHT_BRACE           &trans    &trans     &trans     &trans
                               &trans    &trans     &trans                  &trans                 &trans           &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans        &kp LA(LEFT_ARROW)      &kp LA(RIGHT)  &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &kp LEFT           &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LS(LG(LEFT_ARROW))  &kp LS(LG(RIGHT))  &trans     &trans  &trans  &trans
                        &trans  &trans  &trans                    &trans             &trans  &trans
            >;

            label = "Nav";
        };
    };
};
