/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <400>;
};

&lt {
    tapping-term-ms = <400>;
};

/ {
    behaviors {
        shift_or_caps: shift_or_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_OR_CAPS";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_SHIFT>,
                <&kp CAPS>;

            tapping-term-ms = <300>;
        };
        layer_dance: layer_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_DANCE";
            #binding-cells = <0>;
            bindings =
                <&mo 2>,
                <&mo 1>;
        };
        shift_delete: shift_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_DELETE";
            bindings =
                <&kp BACKSPACE>,
                <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E         &kp R         &kp T        &kp Y      &kp U    &kp I         &kp O    &kp P     &shift_delete
&shift_or_caps  &kp A  &kp S  &kp D         &kp F         &kp G        &kp H      &kp J    &kp K         &kp L    &kp SEMI  &kp SQT
&kp LCTRL       &kp Z  &kp X  &kp C         &kp V         &kp B        &kp N      &kp M    &kp COMMA     &kp DOT  &kp FSLH  &shift_or_caps
                              &kp LEFT_GUI  &layer_dance  &kp SPACE    &kp ENTER  &kp ESC  &kp LEFT_ALT
            >;
        };

        num_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans          &trans            &trans      &trans             &trans             &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
&trans  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &trans        &kp N4        &kp N5        &kp N6        &trans  &trans
&trans  &trans          &trans            &trans      &trans             &trans             &trans        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans  &trans
                                          &trans      &trans             &trans             &trans        &mo 3         &trans
            >;

            label = "Numbers";
        };

        symbols_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Symbols";
            bindings = <
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp LS(N6)            &kp LS(N7)             &kp LS(N8)        &kp MINUS          &kp EQUAL     &trans
&trans     &trans    &trans  &trans    &trans    &trans       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BSLH      &trans
&trans     &trans    &trans  &trans    &trans    &trans       &kp MINUS             &kp EQUAL              &kp LESS_THAN     &kp GREATER_THAN   &kp QUESTION  &trans
                             &trans    &trans    &trans       &trans                &trans                 &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp LA(LEFT_ARROW)        &kp LA(RIGHT)              &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT                  &kp DOWN                   &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LS(LG(LEFT_BRACKET))  &kp LS(LG(RIGHT_BRACKET))  &trans  &trans     &trans  &trans
                        &trans  &trans  &trans    &trans                    &trans                     &trans
            >;

            label = "Nav";
        };
    };
};
